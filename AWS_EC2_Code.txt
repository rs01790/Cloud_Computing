import json
from flask import Flask, request
import math
import random
import yfinance as yf
import pandas as pd
from datetime import date, timedelta
from pandas_datareader import data as pdr
app = Flask(__name__)
def analyze_stock_data(event):

    yf.pdr_override()

    # Get stock data from Yahoo Finance – here, asking for about 10 years of Netflix
    today = date.today()
    decadeAgo = today - timedelta(days=1095)

    data = pdr.get_data_yahoo('NFLX', start=decadeAgo, end=today)

    # Add two columns to this to allow for Buy and Sell signals
    # fill with zero
    data['Buy']=0
    data['Sell']=0

    # Find the 4 different types of signals
    for i in range(2, len(data)):
        body = 0.01

        # Three Soldiers
        if (data.Close[i] - data.Open[i]) >= body and data.Close[i] > data.Close[i-1] and (data.Close[i-1]- data.Open[i-1]) >= body and data.Close[i-1] > data.Close[i-2] and (data.Close[i-2] - data.Open[i-2]) >= body:
            data.at[data.index[i], 'Buy'] = 1

        # Three Crows
        if (data.Open[i] - data.Close[i]) >= body and data.Close[i] < data.Close[i-1] and (data.Open[i-1] - data.Close[i-1]) >= body and data.Close[i-1] < data.Close[i-2] and (data.Open[i-2] - data.Close[i-2]) >= body:
            data.at[data.index[i], 'Sell'] = 1

    # Generate simulated values based on the signals
    minhistory = int(event["minhistory"])
    shots = int(event["shots"])
    bs = int(event["bs"])
	pl_days=int(event["profit_loss"])
    response=[]
    for i in range(minhistory, len(data)):
        if bs==1:
            if data.Buy[i]==1: # if we’re interested in Buy signals
                mean=data.Close[i-minhistory:i].pct_change(1).mean()
                std=data.Close[i-minhistory:i].pct_change(1).std()
                # generate much larger random number series with same broad characteristics
                simulated = [random.gauss(mean,std) for x in range(shots)]
                # sort and pick 95% and 99% - not distinguishing long/short here
                simulated.sort(reverse=True)
                var95 = simulated[int(len(simulated)*0.95)]
                var99 = simulated[int(len(simulated)*0.99)]
				pl=data.Close[i+pl_days]-data.Close[i]
                response.append({"95%": var95,"99%":var99,"date":data.index[i].strftime('%Y-%m-%d'),"Profit/Loss":pl})
        if bs==0:
            if data.Sell[i]==1: # if we’re interested in Sell signals
                mean=data.Close[i-minhistory:i].pct_change(1).mean()
                std=data.Close[i-minhistory:i].pct_change(1).std()
                # generate much larger random number series with same broad characteristics
                simulated = [random.gauss(mean,std) for x in range(shots)]
                # sort and pick 95% and 99% - not distinguishing long/short here
                simulated.sort(reverse=True)
                var95 = simulated[int(len(simulated)*0.95)]
                var99 = simulated[int(len(simulated)*0.99)]
				pl=data.Close[i+pl_days]-data.Close[i]
                response.append({"95%": var95,"99%":var99,"date":data.index[i].strftime('%Y-%m-%d'),"Profit/Loss":pl})

    return {"data":response}

@app.route('/', methods=['POST'])
def analyze():
    event = request.get_json()
	response = analyze_stock_data(event)
	return json.dumps(response)
	
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)